/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * DWTSettings.java
 *
 * Created on 9/08/2011, 11:40:35 AM
 */
package com.github.aonagarcia.igu;

import com.github.aonagarcia.extras.Instance;
import com.github.aonagarcia.extras.Utils;
import java.awt.BorderLayout;
import java.awt.Dimension;
import com.github.aonagarcia.svd.Control;

/**
 *
 * @author javier
 */
public final class DWTSettings extends javax.swing.JFrame {

    private int maxEscala;
    private double maxThDouble;
    private int maxTh;
    private graphics plot;
    private Control ctrl;
    private int varIdx;
    private graphics coefsPlot = new graphics();
    private double _xmin, _xmax, _ymin, _ymax;
    boolean[] abruptChanges;
    double U_Th;
    int ticks=100;

    /** Creates new form DWTSettings */
    public DWTSettings(int varIdx, int maxScale, int maxTh, Control _ctrl, final graphics plot) {
        this.setTitle("Coeficientes / Escalas DWT");
        this.maxEscala = maxScale;
        this.maxTh = maxTh;
        this.maxThDouble=maxTh;
        this.varIdx = varIdx;
        this.ctrl = _ctrl;
        this.plot = plot;
        initComponents();
        coefsPlot.setGraficarFlag(true);

        int sc = ScaleSlider.getValue();
        coefsPlot.setFlagRef(false);
        coefsPlot.setFlagLimits(false);
        coefsPlot.setFlagRangos(false);
        coefsPlot.setFlagOutOfRange(false);
        coefsPlot.setFlagThDWT(true);
        
        coefsPlot.setSize(new Dimension(498, 215));
        this.setInstancesArray(ctrl.changesDetection.getNormCoefs(varIdx));        
        GraphCoefsPanel.add(coefsPlot, BorderLayout.CENTER);
       
        U_Th=ctrl.changesDetection.universalThreshold(varIdx, ScaleSlider.getValue());
        this.ThresholdSlider.setValue((int)U_Th);
        coefsPlot.setThDWT(U_Th);
        
        abruptChanges=ctrl.validarTendenciasHaar(varIdx, ScaleSlider.getValue(), U_Th);
        plot.setCambiosBruscosFlags(abruptChanges);
        coefsPlot.repaint();
        plot.repaint();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        ScaleSlider = new javax.swing.JSlider();
        ThresholdSlider = new javax.swing.JSlider();
        UmbralVal_Label = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        GraphCoefsPanel = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);

        jLabel1.setText("Escala");

        jLabel2.setText("Umbral");

        ScaleSlider.setMajorTickSpacing(1);
        ScaleSlider.setMinorTickSpacing(1);
        ScaleSlider.setMaximum(maxEscala);
        ScaleSlider.setPaintLabels(true);
        ScaleSlider.setPaintTicks(true);
        ScaleSlider.setSnapToTicks(true);
        ScaleSlider.setValue(0);
        ScaleSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                ScaleSliderStateChanged(evt);
            }
        });

        ThresholdSlider.setOrientation(javax.swing.JSlider.VERTICAL);
        //ThresholdSlider.setMaximum(maxTh);
        ThresholdSlider.setMaximum(ticks);
        ThresholdSlider.setPaintTicks(true);
        ThresholdSlider.setMajorTickSpacing(1);
        ThresholdSlider.setMinorTickSpacing(1);
        ThresholdSlider.setValue(0);
        ThresholdSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                ThresholdSliderStateChanged(evt);
            }
        });

        jButton1.setText("Marcar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Cancelar");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        GraphCoefsPanel.setLayout(new BorderLayout());

        javax.swing.GroupLayout GraphCoefsPanelLayout = new javax.swing.GroupLayout(GraphCoefsPanel);
        GraphCoefsPanel.setLayout(GraphCoefsPanelLayout);
        GraphCoefsPanelLayout.setHorizontalGroup(
            GraphCoefsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 502, Short.MAX_VALUE)
        );
        GraphCoefsPanelLayout.setVerticalGroup(
            GraphCoefsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 201, Short.MAX_VALUE)
        );

        jLabel3.setText("Altas Frecuencias ");

        jLabel4.setText("Bajas Frecuencias");

        jButton3.setText("Eliminar");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel2)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED))
                    .addComponent(ThresholdSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jLabel3)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel4))
                        .addComponent(GraphCoefsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(ScaleSlider, javax.swing.GroupLayout.DEFAULT_SIZE, 502, Short.MAX_VALUE)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jButton1)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jButton3)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jButton2)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addComponent(UmbralVal_Label, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(33, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel2)
                    .addComponent(UmbralVal_Label, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(GraphCoefsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addComponent(ThresholdSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(ScaleSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton1)
                            .addComponent(jButton2)
                            .addComponent(jButton3)))
                    .addComponent(jLabel1))
                .addContainerGap())
        );

        UmbralVal_Label.setText(Integer.toString(ThresholdSlider.getValue()));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ThresholdSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_ThresholdSliderStateChanged
        // TODO add your handling code here:
        if (ThresholdSlider.getValueIsAdjusting()) {
            int v = ThresholdSlider.getValue();
            double temp=getValueToSlider(maxThDouble,v);
            //UmbralVal_Label.setText(Double.toString(temp));
            coefsPlot.setThDWT(temp);
            coefsPlot.repaint();            
            abruptChanges=ctrl.validarTendenciasHaar(varIdx, ScaleSlider.getValue(), temp);
            plot.setCambiosBruscosFlags(abruptChanges);
            plot.repaint();
        }
    }//GEN-LAST:event_ThresholdSliderStateChanged

    public double getValueToSlider(double mTh, int currentValSlider)
    {       
        //return (currentValSlider*mTh)/ThresholdSlider.getMaximum();
        return (currentValSlider/Math.sqrt(ThresholdSlider.getMaximum()))*(mTh/Math.sqrt(ThresholdSlider.getMaximum()));

    }

    private void ScaleSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_ScaleSliderStateChanged
        // TODO add your handling code here:
        if (ScaleSlider.getValueIsAdjusting())
        {
            int v= ScaleSlider.getValue();
            maxThDouble = ctrl.changesDetection.getMaxTh(varIdx, v)+1;
            ThresholdSlider.setMinimum(0);
           // if (maxTh>Integer.MAX_VALUE)
                //26-sep-2012 ThresholdSlider.setMaximum(Integer.MAX_VALUE);
            //else
              //  ThresholdSlider.setMaximum((int)maxThDouble);
           
            //EscalaVal_Label.setText(Integer.toString(v));
            coefsPlot.setScaletoPlot(new int[]{v});
            coefsPlot.setLimits(calcularlimites(new int[]{v}, ctrl.changesDetection.getNormCoefs(varIdx)));
            coefsPlot.repaint();
            ThresholdSlider.setValue(0);
            ThresholdSlider.repaint();
        }
    }//GEN-LAST:event_ScaleSliderStateChanged

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:

        int v = ThresholdSlider.getValue();
        double temp=getValueToSlider(maxThDouble,v);
        U_Th=v==0?U_Th:temp;
        abruptChanges=ctrl.validarTendenciasHaar(varIdx, ScaleSlider.getValue(), U_Th);        
        for (int i=0; i<ctrl.BDforPlot.numInstances();i++)
        {
            if (abruptChanges[i]==true && ctrl.BD.instance(i).getErrorType(varIdx)==0)
                ctrl.BD.instance(i).setErrorType(varIdx, 3);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_jButton2ActionPerformed

    @SuppressWarnings("static-access")
    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
               
        //boolean[] s=ctrl.validarTendenciasHaar(varIdx, ScaleSlider.getValue(), getValueToSlider(maxThDouble,ThresholdSlider.getValue()));
        for (int i=0; i<abruptChanges.length;i++)
        {
            if (abruptChanges[i]==true) 
            {
                ctrl.BD.instance(i).setValue(varIdx,Instance.missingValue() );
                ctrl.BDforPlot.instance(i).setValue(varIdx,Instance.missingValue() );
            }
        }
        ctrl._igu.BuildModel.updateGraphic(varIdx);
        plot.repaint();
    }//GEN-LAST:event_jButton3ActionPerformed
    /**
     * @param args the command line arguments
     */
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel GraphCoefsPanel;
    private javax.swing.JSlider ScaleSlider;
    private javax.swing.JSlider ThresholdSlider;
    private javax.swing.JLabel UmbralVal_Label;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    // End of variables declaration//GEN-END:variables

    public void SetMaxScale(int maxScale) {
        this.ScaleSlider.setMaximum(maxScale);

    }

    public void SetMaxTh(int maxTh) {
        this.ThresholdSlider.setMaximum(maxTh);
    }

    private void introLimites() {
        coefsPlot.setLimits(new double[]{_xmin, _xmax, _ymin, _ymax});
        coefsPlot.repaint();
    }

    public void setInstancesArray(double[][] doubles) {
        coefsPlot.setInstancesArray(doubles);
        int[] aux = {0};
        coefsPlot.setScaletoPlot(aux);
        _xmin = 0;
        _xmax = doubles[0].length;
        _ymin = doubles[0][Utils.minIndex2(doubles[0])];
        _ymax = doubles[0][Utils.maxIndex2(doubles[0])];
        coefsPlot.setUserMaxRange(_ymax);
        coefsPlot.setUserMinRange(_ymin);
        coefsPlot.setLimits(new double[]{_xmin, _xmax, _ymin, _ymax});
    }

    public double[] calcularlimites(int[] columnas, double[][] doubles) {
        double minx = 1, maxx = doubles[columnas[0]].length;
        double margen = 0.1;
        double[] a_min = new double[columnas.length], a_max = new double[columnas.length];

        double minimo = 10000000;
        double maximo = -10000000;
        for (int i = 0; i < columnas.length; i++) {
            a_min[i] = doubles[columnas[i]][Utils.minIndex(doubles[columnas[i]])];
            a_max[i] = doubles[columnas[i]][Utils.maxIndex(doubles[columnas[i]])];

            if (Utils.sm(a_min[i], minimo)) {
                minimo = a_min[i];
            }
            if (Utils.gr(a_max[i], maximo)) {
                maximo = a_max[i];
            }

        }
        _xmin = (int) minx;
        _xmax = (int) maxx;
        _ymin = Utils.roundDouble(minimo, 3);
        _ymax = Utils.roundDouble(maximo, 3);

        coefsPlot.setUserMaxRange(_ymax);
        coefsPlot.setUserMinRange(_ymin);
        double[] limites = {minx, maxx, minimo, maximo};
        return limites;
    }
}
